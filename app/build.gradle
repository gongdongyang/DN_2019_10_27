apply plugin: 'com.android.application'
apply plugin: 'com.jakewharton.butterknife'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

static def releaseTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion
    defaultConfig {
        applicationId "com.gdy.dn_2019_10_27"
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        flavorDimensions "dn_2019_10_27"
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
                includeCompileClasspath = true
            }
        }

        //RenderScript向下兼容
        renderscriptTargetApi 18
        renderscriptSupportModeEnabled true
    }


    /**
     * 这前用上面multiDexEnabled true时，
     * 突然在5.0以下的手机上跑不起来，
     * 改成下面这种写法就可以了。
     */
    dexOptions {
        jumboMode true
    }

    compileOptions {
        encoding = "UTF-8"
        incremental false
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
            if (isBuildModule.toBoolean()) {
                //独立运行
                manifest.srcFile 'src/main/alone/AndroidManifest.xml'
            } else {
                //合并到宿主
                manifest.srcFile 'src/main/AndroidManifest.xml'
                resources {
                    //正式版本时，排除debug文件夹下所有调试文件
                    exclude 'src/debug/*'
                }
            }
        }
    }

    signingConfigs {
        release {
            storeFile file("${STORE_FILE}")
            storePassword "${STORE_PWD}"
            keyAlias "${KEY_ALIAS}"
            keyPassword "${KEY_PWD}"
            v1SigningEnabled true
            v2SigningEnabled true
        }
    }

    buildTypes {

        debug {
            //不要忘了要在release的时候加入我么的签名配置信息
            signingConfig signingConfigs.release
            debuggable true
            //buildConfigField("String", "API_HOST_URL", "\"${API_HOST_DEBUG_URL}\"")
            //不显示Log　Zipalign优化
            zipAlignEnabled true
            //移除无用的resource文件
            shrinkResources false
            //启用混淆
            minifyEnabled false
            //proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            ndk {
                //这里要加上，否则debug包会出问题,后面两个为可选，x86建议加上不然部分模拟器回报错
                abiFilters "armeabi-v7a", "x86"
            }

        }

        release {
            //不要忘了要在release的时候加入我么的签名配置信息
            signingConfig signingConfigs.release
            //buildConfigField("String", "API_HOST_URL", "\"${API_HOST_RELEASE_URL}\"")
            //不显示Log　Zipalign优化
            zipAlignEnabled true
            //移除无用的resource文件
            shrinkResources true
            //启用混淆
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            ndk {
                //这里其实我觉可以直接是用"armeabi-v7a"，但国内大多使用的都是"armeabi"
                abiFilters "armeabi-v7a"
            }
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all {
            if (variant.buildType.name == "release") {
                outputFileName = "${variant.productFlavors[0].name}_Release_V${defaultConfig.versionName}_${releaseTime()}_build${defaultConfig.versionCode}_app.apk"
            } else if (variant.buildType.name == "debug") {
                outputFileName = "${variant.productFlavors[0].name}_Debug_V${defaultConfig.versionName}_${releaseTime()}_build${defaultConfig.versionCode}_app.apk"
            }
        }
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    productFlavors {
        dn_2019_10_27 {
            applicationId "com.gdy.dn_2019_10_27"
            //resConfigs("en","xxhdpi")
        }
    }

    dataBinding {
        enabled true
    }

    aaptOptions.cruncherEnabled = false
    aaptOptions.useNewCruncher = false
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'com.android.support:appcompat-v7:29.+'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    //androidTestImplementation 'androidx.test:runner:1.1.1'
    //androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.0.2'


    implementation 'com.google.android.material:material:1.1.0-alpha10'


    implementation 'com.alibaba:arouter-api:1.4.1'

    annotationProcessor 'com.alibaba:arouter-compiler:1.2.2'

    //调试
    implementation 'com.facebook.stetho:stetho:1.3.1'
    implementation 'com.facebook.stetho:stetho-okhttp3:1.3.1'
    //dagger2
    implementation 'com.google.dagger:dagger:2.16'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.16'

    //rxjava
    implementation 'io.reactivex.rxjava2:rxjava:2.1.5'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.2'

    //retrofit
    implementation 'com.squareup.retrofit2:converter-gson:2.3.0'
    implementation 'com.squareup.retrofit2:retrofit:2.3.0'

    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.3.0'


    implementation 'com.jakewharton:butterknife:10.2.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:10.2.0'

    implementation 'androidx.lifecycle:lifecycle-extensions:2.1.0'

    implementation 'pub.devrel:easypermissions:3.0.0'

    implementation 'org.greenrobot:greendao:3.2.2' // add library

    implementation 'com.github.promeg:tinypinyin:2.0.3'
    implementation 'com.github.promeg:tinypinyin-lexicons-android-cncity:2.0.3'

    implementation 'com.github.tbruyelle:rxpermissions:0.10.2'

    implementation "org.java-websocket:Java-WebSocket:1.4.0"

    //implementation 'com.squareup.picasso:picasso:2.71828'
    implementation 'com.squareup.picasso:picasso:2.5.2'

    implementation 'com.tencent:mmkv:1.0.23'

    // 调试工具
    debugImplementation 'com.facebook.stetho:stetho:1.5.0'
    implementation 'com.facebook.stetho:stetho-okhttp3:1.5.0'

    implementation 'com.github.bumptech.glide:glide:4.11.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.11.0'

    implementation project(path: ':bitmax')
    implementation project(path: ':opengl')
    implementation project(path: ':widget')
    implementation project(path: ':network')
    implementation project(path: ':ytool')
    implementation project(path: ':base_recycleview')
    implementation project(path: ':kchartlibrary')
    implementation project(path: ':basedialog')
    implementation project(path: ':libannotation')
    implementation project(path: ':dwlibrary')
    //implementation project(path:':libcompiler')
    implementation project(path: ':libpermissionhepler')
    annotationProcessor project(':libcompiler')
    implementation project(':flutter')

}
